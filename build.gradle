plugins {
    id 'java-library'
    id 'maven-publish'
    id 'fabric-loom' version '1.9-SNAPSHOT'
}

version = mod_version
group = mod_group_id

fabricApi {
    configureDataGeneration()
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

loom {
    accessWidenerPath = file("src/main/resources/charta.accesswidener")
    runs {
        datagen {
            client()

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"

            property "porting_lib.datagen.existing_resources", file("src/main/resources").absolutePath

            runDir "build/datagen"

            dependencies {
                modRuntimeOnly("io.github.fabricators_of_create.Porting-Lib:models:3.1.0-beta.47+1.21.1")
            }

        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    maven {
        name = "PortingLib"
        url = "https://mvn.devos.one/snapshots/"
    }
    maven {
        name = "JEI"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "REI"
        url = "https://maven.architectury.dev/"
    }
    maven {
        name = "EMI"
        url = "https://maven.terraformersmc.com/"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft_version}:${parchment_mappings_version}@zip")
    }

    modImplementation "net.fabricmc:fabric-loader:${loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}+${minecraft_version}"
    modImplementation "me.shedaniel:RoughlyEnoughItems-fabric:16.0.799"
    modCompileOnly("mezz.jei:jei-1.21.1-neoforge-api:19.21.1.300")
    modCompileOnly("dev.emi:emi-neoforge:1.1.22+1.21.1:api")
    modRuntimeOnly("dev.emi:emi-neoforge:1.1.22+1.21.1")


    //Only needed for data generation.
    modCompileOnly("io.github.fabricators_of_create.Porting-Lib:models:3.1.0-beta.47+1.21.1")

    implementation "org.commonmark:commonmark:0.24.0"
    include "org.commonmark:commonmark:0.24.0"
}

processResources {
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "fabric_version", project.fabric_version
    inputs.property "loader_version", project.loader_version
    inputs.property "mod_id", project.mod_id
    inputs.property "mod_name", project.mod_name
    inputs.property "mod_license", project.mod_license
    inputs.property "mod_version", project.mod_version
    inputs.property "mod_authors", project.mod_authors
    inputs.property "mod_description", project.mod_description

    filesMatching("fabric.mod.json") {
        expand([
            "minecraft_version": project.minecraft_version,
            "fabric_version": project.fabric_version,
            "loader_version": project.loader_version,
            "mod_id": project.mod_id,
            "mod_name": project.mod_name,
            "mod_license": project.mod_license,
            "mod_version": project.mod_version,
            "mod_authors": project.mod_authors,
            "mod_description": project.mod_description
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release = 21
}

tasks.withType(Jar).configureEach {
    manifest {
        attributes["Main-Class"] = "dev.lucaargolo.charta.editor.CardEditor"
    }
    exclude("cards/**")
    exclude("decks/**")
    exclude("suits/**")
}

tasks.remapJar.archiveClassifier = "fabric"
